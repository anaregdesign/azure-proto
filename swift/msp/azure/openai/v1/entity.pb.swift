// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: msp/azure/openai/v1/entity.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Msp_Azure_Openai_V1_PromptFilterResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var index: UInt32 = 0

  public var contentFilterResult: Msp_Azure_Openai_V1_ContentFilterPromptResult {
    get {return _contentFilterResult ?? Msp_Azure_Openai_V1_ContentFilterPromptResult()}
    set {_contentFilterResult = newValue}
  }
  /// Returns true if `contentFilterResult` has been explicitly set.
  public var hasContentFilterResult: Bool {return self._contentFilterResult != nil}
  /// Clears the value of `contentFilterResult`. Subsequent reads from it will return its default value.
  public mutating func clearContentFilterResult() {self._contentFilterResult = nil}

  public var promptIndex: UInt32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _contentFilterResult: Msp_Azure_Openai_V1_ContentFilterPromptResult? = nil
}

public struct Msp_Azure_Openai_V1_ErrorBase {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var code: String = String()

  public var message: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Msp_Azure_Openai_V1_ContentFilterPromptResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sexual: Msp_Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _sexual ?? Msp_Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_sexual = newValue}
  }
  /// Returns true if `sexual` has been explicitly set.
  public var hasSexual: Bool {return self._sexual != nil}
  /// Clears the value of `sexual`. Subsequent reads from it will return its default value.
  public mutating func clearSexual() {self._sexual = nil}

  public var violence: Msp_Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _violence ?? Msp_Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_violence = newValue}
  }
  /// Returns true if `violence` has been explicitly set.
  public var hasViolence: Bool {return self._violence != nil}
  /// Clears the value of `violence`. Subsequent reads from it will return its default value.
  public mutating func clearViolence() {self._violence = nil}

  public var hate: Msp_Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _hate ?? Msp_Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_hate = newValue}
  }
  /// Returns true if `hate` has been explicitly set.
  public var hasHate: Bool {return self._hate != nil}
  /// Clears the value of `hate`. Subsequent reads from it will return its default value.
  public mutating func clearHate() {self._hate = nil}

  public var selfHarm: Msp_Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _selfHarm ?? Msp_Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_selfHarm = newValue}
  }
  /// Returns true if `selfHarm` has been explicitly set.
  public var hasSelfHarm: Bool {return self._selfHarm != nil}
  /// Clears the value of `selfHarm`. Subsequent reads from it will return its default value.
  public mutating func clearSelfHarm() {self._selfHarm = nil}

  public var profanity: Msp_Azure_Openai_V1_ContentFilterDetectedResult {
    get {return _profanity ?? Msp_Azure_Openai_V1_ContentFilterDetectedResult()}
    set {_profanity = newValue}
  }
  /// Returns true if `profanity` has been explicitly set.
  public var hasProfanity: Bool {return self._profanity != nil}
  /// Clears the value of `profanity`. Subsequent reads from it will return its default value.
  public mutating func clearProfanity() {self._profanity = nil}

  public var jailbreak: Msp_Azure_Openai_V1_ContentFilterDetectedResult {
    get {return _jailbreak ?? Msp_Azure_Openai_V1_ContentFilterDetectedResult()}
    set {_jailbreak = newValue}
  }
  /// Returns true if `jailbreak` has been explicitly set.
  public var hasJailbreak: Bool {return self._jailbreak != nil}
  /// Clears the value of `jailbreak`. Subsequent reads from it will return its default value.
  public mutating func clearJailbreak() {self._jailbreak = nil}

  public var error: Msp_Azure_Openai_V1_ErrorBase {
    get {return _error ?? Msp_Azure_Openai_V1_ErrorBase()}
    set {_error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return self._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {self._error = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sexual: Msp_Azure_Openai_V1_ContentFilterSeverityResult? = nil
  fileprivate var _violence: Msp_Azure_Openai_V1_ContentFilterSeverityResult? = nil
  fileprivate var _hate: Msp_Azure_Openai_V1_ContentFilterSeverityResult? = nil
  fileprivate var _selfHarm: Msp_Azure_Openai_V1_ContentFilterSeverityResult? = nil
  fileprivate var _profanity: Msp_Azure_Openai_V1_ContentFilterDetectedResult? = nil
  fileprivate var _jailbreak: Msp_Azure_Openai_V1_ContentFilterDetectedResult? = nil
  fileprivate var _error: Msp_Azure_Openai_V1_ErrorBase? = nil
}

public struct Msp_Azure_Openai_V1_ContentFilterChoiceResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sexual: Msp_Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _storage._sexual ?? Msp_Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_uniqueStorage()._sexual = newValue}
  }
  /// Returns true if `sexual` has been explicitly set.
  public var hasSexual: Bool {return _storage._sexual != nil}
  /// Clears the value of `sexual`. Subsequent reads from it will return its default value.
  public mutating func clearSexual() {_uniqueStorage()._sexual = nil}

  public var violence: Msp_Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _storage._violence ?? Msp_Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_uniqueStorage()._violence = newValue}
  }
  /// Returns true if `violence` has been explicitly set.
  public var hasViolence: Bool {return _storage._violence != nil}
  /// Clears the value of `violence`. Subsequent reads from it will return its default value.
  public mutating func clearViolence() {_uniqueStorage()._violence = nil}

  public var hate: Msp_Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _storage._hate ?? Msp_Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_uniqueStorage()._hate = newValue}
  }
  /// Returns true if `hate` has been explicitly set.
  public var hasHate: Bool {return _storage._hate != nil}
  /// Clears the value of `hate`. Subsequent reads from it will return its default value.
  public mutating func clearHate() {_uniqueStorage()._hate = nil}

  public var selfHarm: Msp_Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _storage._selfHarm ?? Msp_Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_uniqueStorage()._selfHarm = newValue}
  }
  /// Returns true if `selfHarm` has been explicitly set.
  public var hasSelfHarm: Bool {return _storage._selfHarm != nil}
  /// Clears the value of `selfHarm`. Subsequent reads from it will return its default value.
  public mutating func clearSelfHarm() {_uniqueStorage()._selfHarm = nil}

  public var profanity: Msp_Azure_Openai_V1_ContentFilterDetectedResult {
    get {return _storage._profanity ?? Msp_Azure_Openai_V1_ContentFilterDetectedResult()}
    set {_uniqueStorage()._profanity = newValue}
  }
  /// Returns true if `profanity` has been explicitly set.
  public var hasProfanity: Bool {return _storage._profanity != nil}
  /// Clears the value of `profanity`. Subsequent reads from it will return its default value.
  public mutating func clearProfanity() {_uniqueStorage()._profanity = nil}

  public var protectedMaterialText: Msp_Azure_Openai_V1_ContentFilterDetectedResult {
    get {return _storage._protectedMaterialText ?? Msp_Azure_Openai_V1_ContentFilterDetectedResult()}
    set {_uniqueStorage()._protectedMaterialText = newValue}
  }
  /// Returns true if `protectedMaterialText` has been explicitly set.
  public var hasProtectedMaterialText: Bool {return _storage._protectedMaterialText != nil}
  /// Clears the value of `protectedMaterialText`. Subsequent reads from it will return its default value.
  public mutating func clearProtectedMaterialText() {_uniqueStorage()._protectedMaterialText = nil}

  public var protectedMaterialCode: Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult {
    get {return _storage._protectedMaterialCode ?? Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult()}
    set {_uniqueStorage()._protectedMaterialCode = newValue}
  }
  /// Returns true if `protectedMaterialCode` has been explicitly set.
  public var hasProtectedMaterialCode: Bool {return _storage._protectedMaterialCode != nil}
  /// Clears the value of `protectedMaterialCode`. Subsequent reads from it will return its default value.
  public mutating func clearProtectedMaterialCode() {_uniqueStorage()._protectedMaterialCode = nil}

  public var error: Msp_Azure_Openai_V1_ErrorBase {
    get {return _storage._error ?? Msp_Azure_Openai_V1_ErrorBase()}
    set {_uniqueStorage()._error = newValue}
  }
  /// Returns true if `error` has been explicitly set.
  public var hasError: Bool {return _storage._error != nil}
  /// Clears the value of `error`. Subsequent reads from it will return its default value.
  public mutating func clearError() {_uniqueStorage()._error = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Msp_Azure_Openai_V1_ContentFilterSeverityResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var filtered: Bool = false

  public var severity: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Msp_Azure_Openai_V1_ContentFilterDetectedResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var filtered: Bool = false

  public var detected: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var filtered: Bool = false

  public var detected: Bool = false

  public var citation: Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult.Citation {
    get {return _citation ?? Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult.Citation()}
    set {_citation = newValue}
  }
  /// Returns true if `citation` has been explicitly set.
  public var hasCitation: Bool {return self._citation != nil}
  /// Clears the value of `citation`. Subsequent reads from it will return its default value.
  public mutating func clearCitation() {self._citation = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public struct Citation {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    public var url: String = String()

    public var license: String = String()

    public var unknownFields = SwiftProtobuf.UnknownStorage()

    public init() {}
  }

  public init() {}

  fileprivate var _citation: Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult.Citation? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Msp_Azure_Openai_V1_PromptFilterResult: @unchecked Sendable {}
extension Msp_Azure_Openai_V1_ErrorBase: @unchecked Sendable {}
extension Msp_Azure_Openai_V1_ContentFilterPromptResult: @unchecked Sendable {}
extension Msp_Azure_Openai_V1_ContentFilterChoiceResult: @unchecked Sendable {}
extension Msp_Azure_Openai_V1_ContentFilterSeverityResult: @unchecked Sendable {}
extension Msp_Azure_Openai_V1_ContentFilterDetectedResult: @unchecked Sendable {}
extension Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult: @unchecked Sendable {}
extension Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult.Citation: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "msp.azure.openai.v1"

extension Msp_Azure_Openai_V1_PromptFilterResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PromptFilterResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "index"),
    2: .unique(proto: "content_filter_result", json: "content_filter_results"),
    3: .standard(proto: "prompt_index"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self.index) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._contentFilterResult) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self.promptIndex) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.index != 0 {
      try visitor.visitSingularUInt32Field(value: self.index, fieldNumber: 1)
    }
    try { if let v = self._contentFilterResult {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    if self.promptIndex != 0 {
      try visitor.visitSingularUInt32Field(value: self.promptIndex, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Msp_Azure_Openai_V1_PromptFilterResult, rhs: Msp_Azure_Openai_V1_PromptFilterResult) -> Bool {
    if lhs.index != rhs.index {return false}
    if lhs._contentFilterResult != rhs._contentFilterResult {return false}
    if lhs.promptIndex != rhs.promptIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Msp_Azure_Openai_V1_ErrorBase: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ErrorBase"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "code"),
    2: .same(proto: "message"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.code) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.message) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.code.isEmpty {
      try visitor.visitSingularStringField(value: self.code, fieldNumber: 1)
    }
    if !self.message.isEmpty {
      try visitor.visitSingularStringField(value: self.message, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Msp_Azure_Openai_V1_ErrorBase, rhs: Msp_Azure_Openai_V1_ErrorBase) -> Bool {
    if lhs.code != rhs.code {return false}
    if lhs.message != rhs.message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Msp_Azure_Openai_V1_ContentFilterPromptResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentFilterPromptResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sexual"),
    2: .same(proto: "violence"),
    3: .same(proto: "hate"),
    4: .standard(proto: "self_harm"),
    5: .same(proto: "profanity"),
    6: .same(proto: "jailbreak"),
    99: .same(proto: "error"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sexual) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._violence) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._hate) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._selfHarm) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._profanity) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._jailbreak) }()
      case 99: try { try decoder.decodeSingularMessageField(value: &self._error) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sexual {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._violence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._hate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._selfHarm {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._profanity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._jailbreak {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._error {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Msp_Azure_Openai_V1_ContentFilterPromptResult, rhs: Msp_Azure_Openai_V1_ContentFilterPromptResult) -> Bool {
    if lhs._sexual != rhs._sexual {return false}
    if lhs._violence != rhs._violence {return false}
    if lhs._hate != rhs._hate {return false}
    if lhs._selfHarm != rhs._selfHarm {return false}
    if lhs._profanity != rhs._profanity {return false}
    if lhs._jailbreak != rhs._jailbreak {return false}
    if lhs._error != rhs._error {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Msp_Azure_Openai_V1_ContentFilterChoiceResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentFilterChoiceResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sexual"),
    2: .same(proto: "violence"),
    3: .same(proto: "hate"),
    4: .standard(proto: "self_harm"),
    5: .same(proto: "profanity"),
    6: .standard(proto: "protected_material_text"),
    7: .standard(proto: "protected_material_code"),
    99: .same(proto: "error"),
  ]

  fileprivate class _StorageClass {
    var _sexual: Msp_Azure_Openai_V1_ContentFilterSeverityResult? = nil
    var _violence: Msp_Azure_Openai_V1_ContentFilterSeverityResult? = nil
    var _hate: Msp_Azure_Openai_V1_ContentFilterSeverityResult? = nil
    var _selfHarm: Msp_Azure_Openai_V1_ContentFilterSeverityResult? = nil
    var _profanity: Msp_Azure_Openai_V1_ContentFilterDetectedResult? = nil
    var _protectedMaterialText: Msp_Azure_Openai_V1_ContentFilterDetectedResult? = nil
    var _protectedMaterialCode: Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult? = nil
    var _error: Msp_Azure_Openai_V1_ErrorBase? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _sexual = source._sexual
      _violence = source._violence
      _hate = source._hate
      _selfHarm = source._selfHarm
      _profanity = source._profanity
      _protectedMaterialText = source._protectedMaterialText
      _protectedMaterialCode = source._protectedMaterialCode
      _error = source._error
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._sexual) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._violence) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._hate) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._selfHarm) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._profanity) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._protectedMaterialText) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._protectedMaterialCode) }()
        case 99: try { try decoder.decodeSingularMessageField(value: &_storage._error) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._sexual {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._violence {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._hate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._selfHarm {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._profanity {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._protectedMaterialText {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._protectedMaterialCode {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._error {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 99)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Msp_Azure_Openai_V1_ContentFilterChoiceResult, rhs: Msp_Azure_Openai_V1_ContentFilterChoiceResult) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sexual != rhs_storage._sexual {return false}
        if _storage._violence != rhs_storage._violence {return false}
        if _storage._hate != rhs_storage._hate {return false}
        if _storage._selfHarm != rhs_storage._selfHarm {return false}
        if _storage._profanity != rhs_storage._profanity {return false}
        if _storage._protectedMaterialText != rhs_storage._protectedMaterialText {return false}
        if _storage._protectedMaterialCode != rhs_storage._protectedMaterialCode {return false}
        if _storage._error != rhs_storage._error {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Msp_Azure_Openai_V1_ContentFilterSeverityResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentFilterSeverityResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "filtered"),
    2: .same(proto: "severity"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.filtered) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.severity) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.filtered != false {
      try visitor.visitSingularBoolField(value: self.filtered, fieldNumber: 1)
    }
    if !self.severity.isEmpty {
      try visitor.visitSingularStringField(value: self.severity, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Msp_Azure_Openai_V1_ContentFilterSeverityResult, rhs: Msp_Azure_Openai_V1_ContentFilterSeverityResult) -> Bool {
    if lhs.filtered != rhs.filtered {return false}
    if lhs.severity != rhs.severity {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Msp_Azure_Openai_V1_ContentFilterDetectedResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentFilterDetectedResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "filtered"),
    2: .same(proto: "detected"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.filtered) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.detected) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.filtered != false {
      try visitor.visitSingularBoolField(value: self.filtered, fieldNumber: 1)
    }
    if !self.detected.isEmpty {
      try visitor.visitSingularStringField(value: self.detected, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Msp_Azure_Openai_V1_ContentFilterDetectedResult, rhs: Msp_Azure_Openai_V1_ContentFilterDetectedResult) -> Bool {
    if lhs.filtered != rhs.filtered {return false}
    if lhs.detected != rhs.detected {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ContentFilterDetectedWithCitationResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "filtered"),
    2: .same(proto: "detected"),
    3: .same(proto: "citation"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self.filtered) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self.detected) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._citation) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.filtered != false {
      try visitor.visitSingularBoolField(value: self.filtered, fieldNumber: 1)
    }
    if self.detected != false {
      try visitor.visitSingularBoolField(value: self.detected, fieldNumber: 2)
    }
    try { if let v = self._citation {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult, rhs: Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult) -> Bool {
    if lhs.filtered != rhs.filtered {return false}
    if lhs.detected != rhs.detected {return false}
    if lhs._citation != rhs._citation {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult.Citation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult.protoMessageName + ".Citation"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .same(proto: "license"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.url) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self.license) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 1)
    }
    if !self.license.isEmpty {
      try visitor.visitSingularStringField(value: self.license, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult.Citation, rhs: Msp_Azure_Openai_V1_ContentFilterDetectedWithCitationResult.Citation) -> Bool {
    if lhs.url != rhs.url {return false}
    if lhs.license != rhs.license {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
