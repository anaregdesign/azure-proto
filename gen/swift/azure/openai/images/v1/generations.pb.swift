// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: azure/openai/images/v1/generations.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Azure_Openai_Images_V1_ImageGenerationsRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var prompt: String = String()

  public var n: UInt32 = 0

  public var size: String = String()

  public var responseFormat: String = String()

  public var userContext: String = String()

  public var quality: String = String()

  public var style: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Azure_Openai_Images_V1_ImageGenerationsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var created: UInt64 = 0

  public var data: Azure_Openai_Images_V1_ImageResult {
    get {return _data ?? Azure_Openai_Images_V1_ImageResult()}
    set {_data = newValue}
  }
  /// Returns true if `data` has been explicitly set.
  public var hasData: Bool {return self._data != nil}
  /// Clears the value of `data`. Subsequent reads from it will return its default value.
  public mutating func clearData() {self._data = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _data: Azure_Openai_Images_V1_ImageResult? = nil
}

public struct Azure_Openai_Images_V1_ImageResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var b64Json: String {
    get {return _storage._b64Json}
    set {_uniqueStorage()._b64Json = newValue}
  }

  public var contentFilterResult: Azure_Openai_Images_V1_DalleContentFilterResult {
    get {return _storage._contentFilterResult ?? Azure_Openai_Images_V1_DalleContentFilterResult()}
    set {_uniqueStorage()._contentFilterResult = newValue}
  }
  /// Returns true if `contentFilterResult` has been explicitly set.
  public var hasContentFilterResult: Bool {return _storage._contentFilterResult != nil}
  /// Clears the value of `contentFilterResult`. Subsequent reads from it will return its default value.
  public mutating func clearContentFilterResult() {_uniqueStorage()._contentFilterResult = nil}

  public var revisedPrompt: String {
    get {return _storage._revisedPrompt}
    set {_uniqueStorage()._revisedPrompt = newValue}
  }

  public var promptFilterResult: Azure_Openai_Images_V1_DalleFilterResult {
    get {return _storage._promptFilterResult ?? Azure_Openai_Images_V1_DalleFilterResult()}
    set {_uniqueStorage()._promptFilterResult = newValue}
  }
  /// Returns true if `promptFilterResult` has been explicitly set.
  public var hasPromptFilterResult: Bool {return _storage._promptFilterResult != nil}
  /// Clears the value of `promptFilterResult`. Subsequent reads from it will return its default value.
  public mutating func clearPromptFilterResult() {_uniqueStorage()._promptFilterResult = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Azure_Openai_Images_V1_DalleContentFilterResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sexual: Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _sexual ?? Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_sexual = newValue}
  }
  /// Returns true if `sexual` has been explicitly set.
  public var hasSexual: Bool {return self._sexual != nil}
  /// Clears the value of `sexual`. Subsequent reads from it will return its default value.
  public mutating func clearSexual() {self._sexual = nil}

  public var violence: Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _violence ?? Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_violence = newValue}
  }
  /// Returns true if `violence` has been explicitly set.
  public var hasViolence: Bool {return self._violence != nil}
  /// Clears the value of `violence`. Subsequent reads from it will return its default value.
  public mutating func clearViolence() {self._violence = nil}

  public var hate: Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _hate ?? Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_hate = newValue}
  }
  /// Returns true if `hate` has been explicitly set.
  public var hasHate: Bool {return self._hate != nil}
  /// Clears the value of `hate`. Subsequent reads from it will return its default value.
  public mutating func clearHate() {self._hate = nil}

  public var selfHarm: Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _selfHarm ?? Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_selfHarm = newValue}
  }
  /// Returns true if `selfHarm` has been explicitly set.
  public var hasSelfHarm: Bool {return self._selfHarm != nil}
  /// Clears the value of `selfHarm`. Subsequent reads from it will return its default value.
  public mutating func clearSelfHarm() {self._selfHarm = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sexual: Azure_Openai_V1_ContentFilterSeverityResult? = nil
  fileprivate var _violence: Azure_Openai_V1_ContentFilterSeverityResult? = nil
  fileprivate var _hate: Azure_Openai_V1_ContentFilterSeverityResult? = nil
  fileprivate var _selfHarm: Azure_Openai_V1_ContentFilterSeverityResult? = nil
}

public struct Azure_Openai_Images_V1_DalleFilterResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var sexual: Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _sexual ?? Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_sexual = newValue}
  }
  /// Returns true if `sexual` has been explicitly set.
  public var hasSexual: Bool {return self._sexual != nil}
  /// Clears the value of `sexual`. Subsequent reads from it will return its default value.
  public mutating func clearSexual() {self._sexual = nil}

  public var violence: Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _violence ?? Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_violence = newValue}
  }
  /// Returns true if `violence` has been explicitly set.
  public var hasViolence: Bool {return self._violence != nil}
  /// Clears the value of `violence`. Subsequent reads from it will return its default value.
  public mutating func clearViolence() {self._violence = nil}

  public var hate: Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _hate ?? Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_hate = newValue}
  }
  /// Returns true if `hate` has been explicitly set.
  public var hasHate: Bool {return self._hate != nil}
  /// Clears the value of `hate`. Subsequent reads from it will return its default value.
  public mutating func clearHate() {self._hate = nil}

  public var selfHarm: Azure_Openai_V1_ContentFilterSeverityResult {
    get {return _selfHarm ?? Azure_Openai_V1_ContentFilterSeverityResult()}
    set {_selfHarm = newValue}
  }
  /// Returns true if `selfHarm` has been explicitly set.
  public var hasSelfHarm: Bool {return self._selfHarm != nil}
  /// Clears the value of `selfHarm`. Subsequent reads from it will return its default value.
  public mutating func clearSelfHarm() {self._selfHarm = nil}

  public var profanity: Azure_Openai_V1_ContentFilterDetectedResult {
    get {return _profanity ?? Azure_Openai_V1_ContentFilterDetectedResult()}
    set {_profanity = newValue}
  }
  /// Returns true if `profanity` has been explicitly set.
  public var hasProfanity: Bool {return self._profanity != nil}
  /// Clears the value of `profanity`. Subsequent reads from it will return its default value.
  public mutating func clearProfanity() {self._profanity = nil}

  public var jailbreak: Azure_Openai_V1_ContentFilterDetectedResult {
    get {return _jailbreak ?? Azure_Openai_V1_ContentFilterDetectedResult()}
    set {_jailbreak = newValue}
  }
  /// Returns true if `jailbreak` has been explicitly set.
  public var hasJailbreak: Bool {return self._jailbreak != nil}
  /// Clears the value of `jailbreak`. Subsequent reads from it will return its default value.
  public mutating func clearJailbreak() {self._jailbreak = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _sexual: Azure_Openai_V1_ContentFilterSeverityResult? = nil
  fileprivate var _violence: Azure_Openai_V1_ContentFilterSeverityResult? = nil
  fileprivate var _hate: Azure_Openai_V1_ContentFilterSeverityResult? = nil
  fileprivate var _selfHarm: Azure_Openai_V1_ContentFilterSeverityResult? = nil
  fileprivate var _profanity: Azure_Openai_V1_ContentFilterDetectedResult? = nil
  fileprivate var _jailbreak: Azure_Openai_V1_ContentFilterDetectedResult? = nil
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Azure_Openai_Images_V1_ImageGenerationsRequest: @unchecked Sendable {}
extension Azure_Openai_Images_V1_ImageGenerationsResponse: @unchecked Sendable {}
extension Azure_Openai_Images_V1_ImageResult: @unchecked Sendable {}
extension Azure_Openai_Images_V1_DalleContentFilterResult: @unchecked Sendable {}
extension Azure_Openai_Images_V1_DalleFilterResult: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "azure.openai.images.v1"

extension Azure_Openai_Images_V1_ImageGenerationsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageGenerationsRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "prompt"),
    2: .same(proto: "n"),
    3: .same(proto: "size"),
    4: .standard(proto: "response_format"),
    5: .standard(proto: "user_context"),
    6: .same(proto: "quality"),
    7: .same(proto: "style"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.prompt) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self.n) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self.size) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self.responseFormat) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self.userContext) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self.quality) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self.style) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.prompt.isEmpty {
      try visitor.visitSingularStringField(value: self.prompt, fieldNumber: 1)
    }
    if self.n != 0 {
      try visitor.visitSingularUInt32Field(value: self.n, fieldNumber: 2)
    }
    if !self.size.isEmpty {
      try visitor.visitSingularStringField(value: self.size, fieldNumber: 3)
    }
    if !self.responseFormat.isEmpty {
      try visitor.visitSingularStringField(value: self.responseFormat, fieldNumber: 4)
    }
    if !self.userContext.isEmpty {
      try visitor.visitSingularStringField(value: self.userContext, fieldNumber: 5)
    }
    if !self.quality.isEmpty {
      try visitor.visitSingularStringField(value: self.quality, fieldNumber: 6)
    }
    if !self.style.isEmpty {
      try visitor.visitSingularStringField(value: self.style, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Azure_Openai_Images_V1_ImageGenerationsRequest, rhs: Azure_Openai_Images_V1_ImageGenerationsRequest) -> Bool {
    if lhs.prompt != rhs.prompt {return false}
    if lhs.n != rhs.n {return false}
    if lhs.size != rhs.size {return false}
    if lhs.responseFormat != rhs.responseFormat {return false}
    if lhs.userContext != rhs.userContext {return false}
    if lhs.quality != rhs.quality {return false}
    if lhs.style != rhs.style {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Azure_Openai_Images_V1_ImageGenerationsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageGenerationsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "created"),
    2: .same(proto: "data"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self.created) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._data) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if self.created != 0 {
      try visitor.visitSingularUInt64Field(value: self.created, fieldNumber: 1)
    }
    try { if let v = self._data {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Azure_Openai_Images_V1_ImageGenerationsResponse, rhs: Azure_Openai_Images_V1_ImageGenerationsResponse) -> Bool {
    if lhs.created != rhs.created {return false}
    if lhs._data != rhs._data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Azure_Openai_Images_V1_ImageResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ImageResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "url"),
    2: .standard(proto: "b64_json"),
    3: .unique(proto: "content_filter_result", json: "content_filter_results"),
    4: .standard(proto: "revised_prompt"),
    5: .unique(proto: "prompt_filter_result", json: "prompt_filter_results"),
  ]

  fileprivate class _StorageClass {
    var _url: String = String()
    var _b64Json: String = String()
    var _contentFilterResult: Azure_Openai_Images_V1_DalleContentFilterResult? = nil
    var _revisedPrompt: String = String()
    var _promptFilterResult: Azure_Openai_Images_V1_DalleFilterResult? = nil

    #if swift(>=5.10)
      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()
    #else
      static let defaultInstance = _StorageClass()
    #endif

    private init() {}

    init(copying source: _StorageClass) {
      _url = source._url
      _b64Json = source._b64Json
      _contentFilterResult = source._contentFilterResult
      _revisedPrompt = source._revisedPrompt
      _promptFilterResult = source._promptFilterResult
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._url) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._b64Json) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._contentFilterResult) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._revisedPrompt) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._promptFilterResult) }()
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 1)
      }
      if !_storage._b64Json.isEmpty {
        try visitor.visitSingularStringField(value: _storage._b64Json, fieldNumber: 2)
      }
      try { if let v = _storage._contentFilterResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._revisedPrompt.isEmpty {
        try visitor.visitSingularStringField(value: _storage._revisedPrompt, fieldNumber: 4)
      }
      try { if let v = _storage._promptFilterResult {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Azure_Openai_Images_V1_ImageResult, rhs: Azure_Openai_Images_V1_ImageResult) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._url != rhs_storage._url {return false}
        if _storage._b64Json != rhs_storage._b64Json {return false}
        if _storage._contentFilterResult != rhs_storage._contentFilterResult {return false}
        if _storage._revisedPrompt != rhs_storage._revisedPrompt {return false}
        if _storage._promptFilterResult != rhs_storage._promptFilterResult {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Azure_Openai_Images_V1_DalleContentFilterResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DalleContentFilterResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sexual"),
    2: .same(proto: "violence"),
    3: .same(proto: "hate"),
    4: .standard(proto: "self_harm"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sexual) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._violence) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._hate) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._selfHarm) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sexual {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._violence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._hate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._selfHarm {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Azure_Openai_Images_V1_DalleContentFilterResult, rhs: Azure_Openai_Images_V1_DalleContentFilterResult) -> Bool {
    if lhs._sexual != rhs._sexual {return false}
    if lhs._violence != rhs._violence {return false}
    if lhs._hate != rhs._hate {return false}
    if lhs._selfHarm != rhs._selfHarm {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Azure_Openai_Images_V1_DalleFilterResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".DalleFilterResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "sexual"),
    2: .same(proto: "violence"),
    3: .same(proto: "hate"),
    4: .standard(proto: "self_harm"),
    5: .same(proto: "profanity"),
    6: .same(proto: "jailbreak"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._sexual) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._violence) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._hate) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._selfHarm) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._profanity) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._jailbreak) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sexual {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._violence {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._hate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._selfHarm {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._profanity {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._jailbreak {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Azure_Openai_Images_V1_DalleFilterResult, rhs: Azure_Openai_Images_V1_DalleFilterResult) -> Bool {
    if lhs._sexual != rhs._sexual {return false}
    if lhs._violence != rhs._violence {return false}
    if lhs._hate != rhs._hate {return false}
    if lhs._selfHarm != rhs._selfHarm {return false}
    if lhs._profanity != rhs._profanity {return false}
    if lhs._jailbreak != rhs._jailbreak {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
